require "init"

local cjson = require "cjson"

local function find_cmd(code)
    for name, cmd in pairs(m2.cmd) do
        if cmd.val == code then
            return name, cmd
        end
    end
end

local hex = m2.hex_to_string(
    "0000064800011cd3000000000000020a6a0898e0f3ff9b8607120b476c6f7279466c616d6573189503200b28f0e518301440144a372a4461696c7920416374697665204f6e6c790a2a48656c7020436f6e74726962757465200a2a4775696c642045787065646974696f6e2060f0e5188001f12e8801b49aa2c101124108bf8af4ff9b8607120c536861646f7720536b696c6c189e01220537373038312889990230b601380140f997d8b80648d0ced4af0650e1990560ca85e92568f12e123b08f1a3f7ff9b8607120a4a7573742052616e646f1888012205373731323028c27b380340c9849eb40648d0dba3b00650e199056087b7800968f12e123b0899f2f3ff9b8607120b4865786564204c6f747573187e2205373730363128f678380340c8ab85b40648d09599b00650dd990560e7efba0568f12e123a08ade2f3ff9b860712074b6f6e7a617368189a012205313032303628b8a70140cf85c8b70648d083cbb20650e199056083f8a20e68f12e78dc0b12360881e58e809c860712064a6968656f6e1894012205313031303828f9a30140dcaea8b60648d098c7b10650dd990560cfc8de0c68f12e123a0887f2f3ff9b8607120a41656769736a616c6d721885012205313032303228d4860140a083b0b30648d0abcfaf0650d6990560c7de9b0768f12e123708d6b9f4ff9b86071208526167654b6167651883012205313031303128947b40c9aad4b40648d0a1aeb00650dd990560d8df800668f12e123108b8fef3ff9b8607120856697363657261781884012205373732393028d97640eecaf7b206509298056085beb30568f12e123b0891fef3ff9b8607120c4861727269736f6e205a65641895012205313031303028b96940e1a7e8b60648d0ca8fb30650d6990560de92a11368f12e123708c08ef4ff9b86071204416e6e79189d0122053737313230289b4240aef6d6b80648d098eab60650d6990560b784b31668f12e78889b04123708e7f0f3ff9b860712084469676f303835311889012205313031303228953e40dec7c4b50648d0e0c5b20650d6990560b088e00868f12e123708cff6f3ff9b860712084b6f74696368656b188f012205373732353128de2740a790d8b60648d0fcd7b40650e199056094b1dd0d68f12e123708889df4ff9b86071208546875794c696e68189b012205313031303428d02140b2bed6b80648d081fab60650e1990560d1c2f10f68f12e1238089291f4ff9b8607120a53616d77656c6c69616e186f2205313032303328821d40db97bfb80648d0b094b70650d6990560a4ebc40268f12e123908b392f4ff9b8607120b42756e20442053656e6a7518722205313133323128a61740c3979eb50648d08decb10650d6990560c8a5e20168f12e123608f584f4ff9b8607120853757370656e736f187522053130313032289c0f40889ef8b20648d0df8bb20650d6990560e9f3900368f12e123508e581f4ff9b860712076c61666c61726518682205313031303828a60e40ba9dd7b80648d0a9feb30650dd99056084ad920368f12e123b08e78ef4ff9b8607120c427265656461626c65546f701882012205313034303328fb0740fac98db70648d0f9a9b30650dd990560d6ee910368f12e12340888e0f3ff9b86071207526f6c6c20746c18a00122053130343035282440eee1bcb80648d0d6a4b30650dd990560d38e2f68f12e1234088294f4ff9b860712074b6172727a6f63186122053130313035282040b2d28eb60648d0c590b60650dd990560daee9d0168f12e22a0010881d6f7ff9b8607100118012209010f10170e050a160c28b2f8dbb80692030c536861646f7720536b696c6c9803f12ea203053737303831aa032d08c08ef4ff9b86071204416e6e79189d012205373731323028d6990530f12e40b784b31648dd80056801800106aa033508bf8af4ff9b8607120c536861646f7720536b696c6c189e012205373730383128e1990530f12e40ca85e92548de8005680380010622a0010888d6f7ff9b8607100118012209010f100b0d08051103288cfcdbb80692030c536861646f7720536b696c6c9803f12ea203053737303831aa032d08c08ef4ff9b86071204416e6e79189d012205373731323028d6990530f12e40b784b31648dd80056801800106aa033508bf8af4ff9b8607120c536861646f7720536b696c6c189e012205373730383128e1990530f12e40ca85e92548de80056803800106"
)

local decoded = m2.net:_decodeData(hex)

Log.Info("Command code is " .. decoded.cmdCode)
Log.Info("Message ID is " .. decoded.iMsgId)

local name, cmd = find_cmd(decoded.cmdCode)
if not name and not cmd then
    Log.Fatal("Failed to find compatible command")
end

Log.Info("Found match for command " .. name)

print("\nRaw Output:")
print(decoded.pbbuffer .. "\n")

local function tohex(str)
    return (str:gsub('.', function(c)
        return string.format('%02X', string.byte(c))
    end))
end

print(tohex(decoded.pbbuffer))

local m2_decoded = m2.protobuf.decodeAll(m2.net.package .. cmd.r, decoded.pbbuffer)
if not m2_decoded then
    Log.Fatal("Failed to decode protobuf")
end

local formatted = cjson.encode(m2_decoded)
if formatted == "false" then
    Log.Fatal("Failed to encode to JSON")
end

print("\nJSON output:")
print(formatted)
